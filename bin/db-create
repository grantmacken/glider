#!/usr/bin/env bash
set -Eeuo pipefail
declare -a args
args=("$@")
source .env
CURL="ghcr.io/grantmacken/podx-curl:${CURL_VER}"
DB='http://localhost:8081/db' 

function dash {
  printf %60s | tr ' ' '-' && echo
}

function msg() {
  echo >&2 -e "${1-}"
}

function die() {
  local msg=$(echo -n 'âœ˜  ' && echo "$1")
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

case "${#args[@]}" in
1)
  BASE=$(echo $1 | grep -oP '^(src/data/)?\K(.+)$')
  SRC="src/data/$BASE"
  [ -f $SRC ] || die "[ $SRC ]: NOT a file "
  DIRNAME=$(dirname $BASE)
  BASENAME=$(basename $BASE)
  EXT="${BASENAME##*.}"
  RESOURCE="${BASENAME%.*}"
  URI="${DB}/${DIRNAME}"

  # echo "##[collection:  $URI ]##"
  # echo "##[  resource:  $RESOURCE ]##"
  # use extension
  case ${EXT} in
  json)
  jq  '.' "${SRC}" &>/dev/null || 
  die " [ ${SRC}  ] invalid JSON: not well formed"
	jq -c '.' ${SRC} |
	podman run --rm --pod podx \
    --interactive ghcr.io/grantmacken/podx-curl:${CURL_VER} \
		--silent --show-error --connect-timeout 1 --max-time 2 \
		--write-out '%{http_code}' --output /dev/null \
		--header "Content-Type: application/json" \
		--header "Slug: $RESOURCE" \
		--data-binary @- \
		--output /dev/null \
		${DB}/${DIRNAME}
    ;;
  xml)
    xmllint $SRC &>/dev/null || die " [ $SRC  ] invalid XML: not well formed"
    xmllint --nowarning --c14n $SRC |
    podman run --rm --pod podx \
        --interactive ghcr.io/grantmacken/podx-curl:${CURL_VER} \
        --silent --show-error --connect-timeout 1 --max-time 2 \
        --write-out '%{http_code}' --output /dev/null \
        --header "Content-Type: application/xml" \
        --header "Slug: $RESOURCE" \
        --data-binary @- \
        --output /dev/null \
        ${DB}/${DIRNAME}/
    ;;
  md)
  echo "collection:  $DB/$DIRNAME"
  echo "resource: $RESOURCE "
  dash
    CMARK_IMG=ghcr.io/grantmacken/podx-cmark:$CMARK_VER
    #xmllint - --format | \
    cat $SRC |
      podman run --rm --interactive ${CMARK_IMG} \
        --to xml \
        --validate-utf8 \
        --safe \
        --smart 2>/dev/null |
      sed -e '1,2d' |
      podman run --rm --pod podx \
        --interactive ghcr.io/grantmacken/podx-curl:${CURL_VER} \
        --silent --show-error --connect-timeout 1 --max-time 2 \
        --write-out '%{http_code}' --output /dev/null \
        --header "Content-Type: application/xml" \
        --header "Slug: $RESOURCE" \
        --data-binary @- \
        --output /dev/null \
        ${DB}/${DIRNAME}/
    ;;
  xq)
  SOURCE="./src/data/$BASE"
  #echo "src: $SOURCE"
  URI="http://$DIRNAME/$RESOURCE"
  RUN=$(cat << EOF
  try {
  let \$item := $(cat $SOURCE )
    return
    if (\$item instance of item())
    then ( true(),db:put( \$item,'$URI' ))
    else false()
    } catch * {false()}
EOF
)
  # echo -e "$RUN"
  podman exec xq xqerl eval "xqerl:run(\"$RUN\")."
  ;;
  *)
    die " [ ${EXT} ] can not handle extension "
    ;;
  esac
  ;;
*)
  die "Usage: $(basename "${BASH_SOURCE[0]}") [src] 1 arg required"
  ;;
esac
