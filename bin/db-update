#!/usr/bin/env bash
set -Eeuo pipefail
declare -a args
args=("$@")
source .env
DB='http://localhost:8081/db' 

function dash {
  printf %60s | tr ' ' '-' && echo
}

function msg() {
  echo >&2 -e "${1-}"
}

function die() {
  local msg=$(echo -n "âœ˜  " && echo $1)
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

case "${#args[@]}" in
1)
  BASE=$(echo $1 | grep -oP '^(src/data/)?\K(.+)$')
  SRC="src/data/$BASE"
  [ -f $SRC ] || die "[ $SRC ]: NOT a file "
  DIRNAME=$(dirname $BASE)
  BASENAME=$(basename $BASE)
  EXT="${BASENAME##*.}"
  RESOURCE="${BASENAME%.*}"
  URI="${DB}/${DIRNAME}"
  EXT="${BASENAME##*.}"
  RESOURCE="${BASENAME%.*}"
  URI="${DB}/${DIRNAME}/${RESOURCE}"
  # use extension
  case ${EXT} in
  json)
  jq  '.' "${SRC}" &>/dev/null || 
  die " [ ${SRC}  ] invalid JSON: not well formed"
	jq -c '.' ${SRC} |
	podman run --rm --pod podx \
    --interactive ghcr.io/grantmacken/podx-curl:${CURL_VER} \
		--silent --show-error --connect-timeout 1 --max-time 2 \
    -X PUT \
		--write-out '%{http_code}' --output /dev/null \
		--header "Content-Type: application/json" \
		--data-binary @- \
		--output /dev/null \
		${URI}
    ;;
  xml)
  echo "collection: $URI "
    # use xmllint to check if doc wellformed
    xmllint $SRC &>/dev/null || die " [ $SRC  ] invalid XML: not well formed"
    xmllint --nowarning --c14n $SRC |
    podman run --rm --pod podx \
        --interactive ghcr.io/grantmacken/podx-curl:${CURL_VER} \
        --silent --show-error --connect-timeout 1 --max-time 2 \
        --write-out '%{http_code}' --output /dev/null \
        --header "Content-Type: application/xml" \
        --data-binary @- \
        --output /dev/null \
        -X PUT \
        ${URI}
    ;;
  md)
  echo "collection: ${URI} "
    CMARK_IMG=ghcr.io/grantmacken/podx-cmark:$CMARK_VER
    cat $SRC |
    podman run --rm --interactive ${CMARK_IMG} \
      --to xml \
      --validate-utf8 \
      --safe \
      --smart 2>/dev/null |
    xmllint --nowarning --dropdtd --c14n - |
    podman run --rm --pod podx \
      --interactive ghcr.io/grantmacken/podx-curl:${CURL_VER} \
      --silent --show-error --connect-timeout 1 --max-time 2 \
      --write-out '%{http_code}' --output /dev/null \
      --header "Content-Type: application/xml" \
      --data-binary @- \
      -X PUT \
      "${URI}"
    ;;
  xq)
  SOURCE="./src/data/$BASE"
  echo "src: $SOURCE "
  podman exec xq xqerl eval "
  Arg1 = list_to_binary(\"${SOURCE}\"),
  Args = #{<<\"src\">> => Arg1},
  Mod = xqerl:compile(\"./src/code/db-store-func.xq\"),
  case Mod:main(Args) of
    Bin when is_binary(Bin) ->  file:write_file(\"./src/store.xq\",binary_to_list(Bin));
    Atom when is_atom(Atom) -> Atom;
    _ -> false
  end,
  xqerl:run(xqerl:compile(\"./src/store.xq\"))."
  rm -f ./src/store.xq
    ;;
  *)
    die " [ ${ext} ] can not handle extension "
    ;;
  esac
  ;;
*)
  die "Usage: $(basename "${BASH_SOURCE[0]}") [src] 1 arg required"
  ;;
esac
